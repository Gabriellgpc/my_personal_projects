== Troca Regiões

O usuário deve passar uma imagem qualquer, e o programa passara para escala de cinza e particionara a
imagem em 4(quatro) partes simétricas e realizara a troca na diagonal dessas quatro subimagens.

Para este programa uma imagem foi pensada sendo composta por 4 regiões da seguinte forma:

[cols="2*^", width="25%"]
|===
| A | B
| C | D
|===

Compilando e Executando.
....
$ make trocaregioes
$ ./trocaregioes <caminho_para_a_imagem>
....

Código completo em link:unidade1/trocaRegioes/trocaregioes.cpp[trocaregioes.cpp]
//link para baixar codigo fonte

[source,cpp]
----
int main(int argc, char** argv){
  Mat img;
  Mat result;
  int w, h;

  img = imread(argv[1],CV_LOAD_IMAGE_GRAYSCALE);
  //if fail to read the image
  if ( img.empty() )
  {
       cout << "Error loading the image" << endl;
       return -1;
  }

  w = img.size().width;
  h = img.size().height;
  result = img.clone();

  img(cv::Rect(0,0, w/2, h/2)).copyTo(result(cv::Rect((w-1)/2, (h-1)/2, w/2, h/2)));  ;;<1>
  img(cv::Rect((w-1)/2, 0, w/2, h/2)).copyTo(result(cv::Rect(0, (h-1)/2, w/2, h/2))); ;;<2>
  img(cv::Rect(0, (h-1)/2, w/2, h/2)).copyTo(result(cv::Rect((w-1)/2, 0, w/2, h/2))); ;;<3>
  img(cv::Rect((w-1)/2, (h-1)/2, w/2, h/2)).copyTo(result(cv::Rect(0, 0, w/2, h/2))); ;;<4>

  imshow("Original", img);
  imshow("Resultado", result);
  waitKey();

  imwrite("resultados/trocaRegiao_resultado.png", result);

  return 0;
}

----
<1> Sobrepoe A da img original em D de result
<2> Sobrepoe B da img original em C de result
<3> Sobrepoe C da img original em B de result
<4> Sobrepoe D da img original em A de result

Resultado
[cols="2*^", width="25%"]
|===
| D | C
| B | A
|===

// Imagens de antes e depois
[.float-group]
--
[.left.text-center]
image::imagens/toto_mini.png[title="Entrada do programa trocaregioes"]

[.left.text-center]
image::unidade1/trocaRegioes/trocaRegiao_resultado.png[title="Saída do programa trocaregioes"]
--
